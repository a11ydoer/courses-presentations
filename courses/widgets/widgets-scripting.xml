<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
 <lang>en</lang>
  <title>Introduction to ARIA</title>
  <name>Jon Gunderson</name> 
  <name>Jon Gunderson, Ph.D.</name> 
  <desc href="http://disability.illinois.edu">Division of Disability Resources and Educational Services</desc>
  <desc href="http://ahs.illinois.edu">College of Applied Health Sciences</desc>
  <desc href="http://illinois.edu">University of Illinois at Urbana-Champaign</desc>
  <email>jongund@illinois.edu</email>
  <home>../badges-aria101.html</home> 

  
  <stylesheet media="screen">../../common/css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-theme.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-accessibility.css</stylesheet>
  <stylesheet media="screen">../../common/css/xml-slides.css</stylesheet>
  <stylesheet media="screen">../../common/css/highlight.css</stylesheet>
  <script>../../common/js/jquery-2.1.1.min.js</script>
  <script>../../common/js/bootstrap.min.js</script>
  <script>../../common/js/bootstrap-accessibility.min.js</script>
  <script>../../common/js/highlight.pack.js</script>
  <script>../../common/js/xml-slides.js</script>
  
  <slide>
    <title>Overview</title>
    <contents>
      <ul>
        <li>Brief History of ARIA </li>
        <li>ARIA basics</li>
        <li>Checkbox Example</li>
        <li>ARIA Design Patterns
          <ul>
            <li>Disclosure (Hide/Show)</li>
            <li>Menu Button</li>
            <li>Menubar</li>
            <li>Navigation Menus</li>
            <li>Image Carousel</li>
          </ul>
        </li>    
        <li>Authoring Resources</li>
        <li>Open Source Evaluation and Inspection Tools</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>

  <slide>
    <title>The Problem of Custom Wigets</title>
    <contents>
      <h2>Problem</h2>
      <ul>
        <li>Starting arounf the year 2000 developers and designers started using HTML+CSS+Javascript to create <em>custom user interface widgets</em> (e.g. interactive controls) for web pages.</li>
        <li>There was no standard and interoperable way to make these <em>custom widgets</em> accessible.</li>
      </ul>
      
      <h2>Issues</h2>
      <ul>
        <li>Keyboard support.</li>
        <li>Describing the widget behavior (e.g. role).</li>
        <li>Labeling the features of the widget (e.g. accessible name).</li>
        <li>Identifying properties and states. (e.g. checked, exapnded, has popup)</li>
        <li>Communicating information through platform specific accessibility APIs.</li>
        <li>Interoperability between browser and accessibility APIs.</li>
      </ul>
    </contents>
  </slide>  
  
  <slide>
    <title>Purpose of ARIA to Describe Behavior and Features</title>
    <contents>
       <ul>
         <li>Provide an interoperable way to describe the features of <em>custom widgets</em>:
           <ul>
             <li><strong>Role:</strong> Describes the type of widget, which implies the <em>keyboard interaction</em>.</li>
             <li><strong>Properties and States:</strong> Describing features like "expandable", "checked" or "selected".</li>
             <li><strong>Language independence:</strong> Roles, properties and states can be translated by the operating systems and assistive technologies to local languages.</li>
             <li><strong>Labeling:</strong> How to label the features of the widget and its components (e.g. accessible name).</li>
             <li><strong>Relationships:</strong> How different components relate to each other (e.g. descriptions, controls, owns).</li>
             <li><strong>Grouping:</strong> Groups of related components (e.g. lists, menus, trees, tab panels).</li>
           </ul>
        </li>
        <li>Define markup mappings to accessibility APIs:
          <ul>
            <li>ATK/AT-SPI (Linux/Unix)</li>
            <li>Microsoft Active Accessibility (MSAA) + IAccessible2</li>
            <li>Microsoft UI Automate</li>
            <li>MacOS Accessibility API</li>
          </ul>
         </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA Contract with Browsers and Assistive Technologies</title>
    <contents>
      <h2>Browsers</h2>
      <ul>
        <li>The use of ARIA markup does not affect browser behavior or rendering.</li>
        <li>ARIA only affects how information is represented in accessibility APIs (e.g. MSAA+IAccessible2, ATK+SPI, UIAutomate, MacOS).</li>
      </ul>
      
      <h2>Asssitive Technologies</h2>
      <ul>
        <li>Do not specify what assistive technologies will do with the information.</li>
      </ul>
    </contents>
  </slide> 

  <slide>
    <title>Accessible Rich Internet Applications (ARIA) Basics</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="id1">
        <thead>
          <tr>
            <th>Feature</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>tabindex</td>
            <td>
              <ul>
                <li>Used for identifying elements that can receive keyboard focus.</li>
                <li><code>tabindex=-1</code>: Element can receive keyboard focus, but not in tab order of page.</li>
                <li><code>tabindex=0</code>: Element can receive keyboard focus, is included in tab order of page.</li>
                <li><code>tabindex&gt;0</code>: Element can receive keyboard focus, but changes tab order of page <br/>(<strong>NOTE:</strong> <code>tabindex&gt;0</code> is rarely if ever used, has many browser compatibility issues).</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Keyboard focus</td>
            <td>
              <ul>
                <li>Javascript <code>focus()</code> method to move keyboard focus to a DOM node using javascript.</li>
                <li>Visually styling keyboard focus:
                  <ul>
                    <li>Mimic the mouse hover styling to match look and feel or website, to make it feel an integral part of the website design.</li>
                    <li>Include a strong visual CSS <code>border</code> or <code>outline</code> to make the focus standout as users tab through the page.</li>
                  </ul>
                </li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>role</td>
            <td>
              <ul>
                <li>Attribute to define the type of widget in the web resource.</li>
                <li>
                  Based on the <a href="http://www.w3.org/TR/2007/WD-xhtml-role-20071004/" target="_specification">XHTML Role Attribute Module</a>.
                </li>
                <li>
                  ARIA roles defined in the <a href="https://www.w3.org/TR/wai-aria-1.1/#widget_roles" target="_specification">Accessible Rich Internet Application</a> specification.
                </li>
              </ul></td>
          </tr>
          <tr>
            <td>Accessible Name</td>
            <td>
              <ul>
                <li><code>aria-labelledby</code> attribute: List of <code>IDREF</code>s to elements with text content on the page.</li>
                <li><code>aria-label</code> attribute: String defining the accessible name.</li>
                <li>Text content of the element with widget role (e.g. text of menu item).</li>
                <li><code>title</code> attribute: String defining the accessible name (e.g. name of last resort).</li>
                <li><a href="https://www.w3.org/TR/accname-aam-1.1/">Accessible name algorithm</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Properties and States</td>
            <td>
              <ul>
                <li>
                  <a href="http://www.w3.org/TR/aria-state/"  target="_specification">States and Properties Module</a> for
                    Accessible Rich Internet Applications (WAI-ARIA States and Properties).
                </li>
                <li>aria-checked</li>
                <li>aria-describedby</li>
                <li>aria-haspopup</li>
                <li>aria-expanded</li>
                <li>many others...</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>W3C Authoring Resources</td>
            <td>
              <ul>
                <li><a href="http://www.w3.org/TR/wai-aria-practices/" target="_specification">WAI-ARIA Authoring Practices</a></li>
                <li><a href="http://www.w3.org/TR/aria-in-html/" target="_specification">Using ARIA in HTML</a></li>
                <li><a href="https://www.w3.org/TR/core-aam-1.1/" target="_specification">Core Accessibility API Mappings 1.1
                </a></li>
                <li><a href="https://www.w3.org/TR/html-aam-1.0/" target="_specification">HTML Accessibility API Mappings 1.0</a></li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>
  
  <slide>
    <title>Tabindex and keyboard focus</title>
    <contents>
      <ul>
        <li>
            <a
              href="https://www.w3.org/TR/html4/interact/forms.html#adef-tabindex"  target="_specification">
              HTM4 tabindex requirements
            </a>
        </li>
        <li>
            <a
              href="https://www.w3.org/TR/html5/editing.html#focus"  target="_specification">
              HTM5 focus and tabindex requirements
            </a>
        </li>
        <li>Support in <strong>all</strong> modern major browsers</li>
       <li>Visual focus styling should be actively defined to make is easy to find what has focus (e.g. do NOT rely of browser focus styling of focus)</li>
      </ul>

      <h2 id="tabindex_values">Tabindex Values</h2>
      <table class="table table-striped table-hover" aria-label="tabindex_values">
        <thead>
          <tr>
            <th>Value</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Not included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>&gt; 0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Defines the tab order of the page.</li>
                <li><strong>Note:</strong> This technique is not recommended due to browser incompatibilities and unpredicatable focus behaviors.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>  
    </contents>
  </slide>

  <slide>
    <title>Accessible name calculation</title>
    <contents>
      <ul>
        <li>Child text nodes of <code>a</code> element</li>
        <li><code>aria-label</code> attribute</li>
        <li><code>aria-labelledby</code> attribute</li>
        <li><code>title</code> attribute (rare)</li>
        <li><code>alt</code> attribute for <code>img</code> elements</li>
      </ul>
    </contents>
  </slide>
  
  <slide>
    <title>Accessible description calculation</title>
    <contents>
      <ul>
        <li><code>aria-describedby</code> attribute</li>
        <li><code>title</code> attribute (tooltip), if not used for accessible name</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Example Widget: ARIA Checkbox</title>
    <style id="style">
      fieldset {
        border-color: #EEE; 
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;      
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }

      div[role="checkbox"][aria-checked="true"] span {
        margin-right: 0.135em;
      }

      div[role="checkbox"] span:before {
        content: '✗';
        color: red;
      }

      div[role="checkbox"][aria-checked="true"] span:before {
        content: '✓';
        color: green;
        font-size: 90%;
      }

      label,
      [role="checkbox"] {
        border: thin solid transparent;
        width: 10em;
      }


      label.focus,
      [role="checkbox"]:focus {
        border-color: #999;
        background-color: #DDE;
      }

      label:hover,
      [role="checkbox"]:hover {
        background-color: #CCD; 
      }
    </style>
    <contents>


      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          if (node.getAttribute('aria-checked') === 'true') {
            node.setAttribute('aria-checked', 'false');
          }
          else {
            node.setAttribute('aria-checked', 'true');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);
          event.stopPropagation();
          event.preventDefault();
        }

        function checkboxFocus(event) {
          event.currentTarget.parentNode.classList.add('focus');
        }

        function checkboxBlur(event) {
          event.currentTarget.parentNode.classList.remove('focus');
        }
      </script>

     <h2>Features</h2>
     <ul>
       <li>Responds to mouse events using <code>onClick</code> event.</li>
       <li>Responds to <kbd>space</kbd> keyboard event using <code>onKeyDown</code> event.</li>
       <li><code>tabindex=0</code> makes widget keyboard focusable and include in tab order of page.</li>
       <li><code>role="checkbox"</code> identifies widget to assistive technologies as a "checkbox".</li>
       <li><code>aria-checked</code> attribute identifies the state as being "checked" or "unchecked".</li>
       <li>Accessible name comes from child text content of the <code>div[role="checkbox"]</code> element.</li>
       <li><code>aria-hidden</code> attribute hides the characters used for indicating state (i.e. <span style="color: red">✗</span> and <span style="color: green">✓</span>) from being included in the accessible name calculation.</li>
       <li>CSS attribute selectors are used to keep the visual indication of checked state snychronized with accessibility API.</li>
       <li><code>onFocus</code> and <code>onBlur</code> event handlers are used on standard checkboxes to provide visual indication of keyboard focus.</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://jsfiddle.net/jongund/ksq3tqdz/" target="_jsfiddle">Checkbox example on jsfiddle</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>
        
        <label>
          <input type="checkbox"
                 onfocus="checkboxFocus(event)"
                 onBlur="checkboxBlur(event)"/>

          Green pepper
        </label>
        
        <label>
          <input type="checkbox"
                 onfocus="checkboxFocus(event)"
                 onBlur="checkboxBlur(event)"/>
          Onion
        </label>

        <div role="checkbox" 
             tabindex="0" 
             aria-checked="false" 
             onkeydown="keydownCheckbox(event)" 
             onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>
          Mushrooms
        </div>

      <div role="checkbox" 
           tabindex="0" 
           aria-checked="false"
           onkeydown="keydownCheckbox(event)" 
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>
      
      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>
      
      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>
      
      <pre><code id="sc3"></code></pre>
              
      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
   </contents>
  </slide>

 <slide>

      <title>Basic screen reader commands related to links</title>
      <contents>
        <table class="table table-striped table-hover" aria-labelledby="id1">
          <thead>
            <tr>
              <th>Action</th>
              <th>JAWS (Windows)</th>
              <th>NVDA (Windows)</th>
              <th>Voice Over (OS X)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Next link</td>
              <td>Tab</td>
              <td>Tab</td>
              <td>Tab</td>
            </tr>
            <tr>
              <td>Previous link</td>
              <td>Shift+Tab</td>
              <td>Shift+Tab</td>
              <td>Shift+Tab</td>
            </tr>
            <tr>
              <td>Re-read current link</td>
              <td>Insert+Numpad 5</td>
              <td>NVDA+Numpad 5 or NVDA+Shift+O</td>
              <td>Command+Option+Space</td>
            </tr>
            <tr>
              <td>More information on link</td>
              <td>Insert+SHIFT+F1 and Insert+Control+Shift+F1</td>
              <td>NVDA+D</td>
              <td>Control+Option+F4</td>
            </tr>
            <tr>
              <td>List of Links</td>
              <td>Insert+F7</td>
              <td>NVDA+F7</td>
              <td>Command+Option+U, then left/right arrow to list of links</td>
            </tr>
            <tr>
              <td>Detailed Keyboard Information</td>
              <td><a href="http://doccenter.freedomscientific.com/doccenter/archives/training/jawskeystrokes.htm">JAWS Keyboard Documentation</a></td>
              <td><a href="http://www.nvaccess.org/files/nvda/documentation/userGuide.html">NVDA Documentation</a></td>
              <td><a href="https://www.apple.com/voiceover/info/guide/">Voice Over Guide</a></td>
            </tr>
          </tbody>
        </table>  
      </contents>
    </slide>

  <slide>
    <title>Part 1 Responding to the keyboard</title>
    <style id="style">
      fieldset {
        border-color: #EEE; 
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;      
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }
    </style>
    <contents>
      <ul>
        <li>Adding <code>tabindex="0"</code> to make part of tab order of the page.</li>
        <li>Add <code>onKeyDown</code> event handler to toggle checkbox when <kbd>space</kbd> key is pressed.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          var n = node.firstElementChild;
          if (n.innerHTML.indexOf('✗') &gt;= 0) {
            n.innerHTML = '✓';
            n.style.color = 'green';
            n.style.paddingRight = '0px';
          }
          else {
            n.innerHTML = '✗';
            n.style.color = 'red';
            n.style.paddingRight = '0.22em';
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

      </script>

     <h2>Example</h2>

     <p><a href="https://jsfiddle.net/jongund/6tk720rt/" target="_jsfiddle">Part 1 on jsfiddle</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>
        
        <label>
          <input type="checkbox"/>

          Green pepper
        </label>
        
        <label>
          <input type="checkbox"/>
          Onion
        </label>

        <div tabindex="0" 
             onkeydown="keydownCheckbox(event)" 
             onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Mushrooms
        </div>

      <div tabindex="0" 
           onkeydown="keydownCheckbox(event)" 
           onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>
      
      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>
      
      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>
      
      <pre><code id="sc3"></code></pre>
              
      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Part 2: Adding role and checked state</title>
    <style id="style">
      fieldset {
        border-color: #EEE; 
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;      
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }
    </style>
    <contents>
      <ul>
        <li>Adding <code>role="checkbox"</code> to make part of tab order of the page.</li>
        <li>Adding <code>aria-checked</code> attribute.</li>
        <li>Accessible name from text content.</li>
        <li>Removing state character from accessible name using <code>aria-hidden</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          var n = node.firstElementChild;
          if (n.innerHTML.indexOf('✗') &gt;= 0) {
            n.innerHTML = '✓';
            n.style.color = 'green';
            n.style.paddingRight = '0px';
            n.setAttribute('aria-checked', 'true');
          }
          else {
            n.innerHTML = '✗';
            n.style.color = 'red';
            n.style.paddingRight = '0.22em';
            n.setAttribute('aria-checked', 'false');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

      </script>

     <h2>Example</h2>

     <p><a href="https://jsfiddle.net/jongund/zzds7jqs/" target="_jsfiddle">Part 2 on jsfiddle</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>
        
        <label>
          <input type="checkbox"/>

          Green pepper
        </label>
        
        <label>
          <input type="checkbox"/>
          Onion
        </label>

        <div role="checkbox" 
             tabindex="0" 
             aria-checked="false" 
             onkeydown="keydownCheckbox(event)" 
             onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Mushrooms
        </div>

      <div role="checkbox" 
           tabindex="0" 
           aria-checked="false"
           onkeydown="keydownCheckbox(event)" 
           onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>
      
      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>
      
      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>
      
      <pre><code id="sc3"></code></pre>
              
      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

 <slide>
    <title>Part 3: CSS attribute selectors and focus styling</title>
    <style id="style">
      fieldset {
        border-color: #EEE; 
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;      
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }
    </style>
    <contents>
      <ul>
        <li>Adding <code>role="checkbox"</code> to make part of tab order of the page.</li>
        <li>Adding <code>aria-checked</code> attribute.</li>
        <li>Accessible name from text content.</li>
        <li>Removing state character from accessible name using <code>aria-hidden</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          var n = node.firstElementChild;
          if (n.innerHTML.indexOf('✗') &gt;= 0) {
            n.innerHTML = '✓';
            n.style.color = 'green';
            n.style.paddingRight = '0px';
            n.setAttribute('aria-checked', 'true');
          }
          else {
            n.innerHTML = '✗';
            n.style.color = 'red';
            n.style.paddingRight = '0.22em';
            n.setAttribute('aria-checked', 'false');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

      </script>

     <h2>Example</h2>

     <p><a href="https://jsfiddle.net/jongund/zzds7jqs/" target="_jsfiddle">Part 2 on jsfiddle</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>
        
        <label>
          <input type="checkbox"/>

          Green pepper
        </label>
        
        <label>
          <input type="checkbox"/>
          Onion
        </label>

        <div role="checkbox" 
             tabindex="0" 
             aria-checked="false" 
             onkeydown="keydownCheckbox(event)" 
             onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Mushrooms
        </div>

      <div role="checkbox" 
           tabindex="0" 
           aria-checked="false"
           onkeydown="keydownCheckbox(event)" 
           onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>
      
      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>
      
      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>
      
      <pre><code id="sc3"></code></pre>
              
      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>


  <slide>
    <title>Example Widget: ARIA Checkbox with Focus Styling</title>
    <contents>
      <p class="center"><a href="checkbox/checkbox.zip" target="_example">ZIP file of Checkbox Examples</a></p>
      <p class="center"><a href="checkbox/checkbox-focus.html" target="_example">ARIA checkbox examples with focus styling</a></p>
      <h2>Additional Features</h2>
      <ul>
        <li>Use <code>:focus</code> pseudo element focusing only focuses the checkbox and not the label</li>
        <li>Use <code>onFocus</code> and <code>onBlur</code> events to add and remove class for identifying focus</li>
        <li>Use <code>:hover</code> pseudo class to style checkboxes for mouse overs</li>
        <li>Standard checkbox 3 doesn't have label so you have to click directly on the checkbox image to change state</li>
      </ul>
      <p class="center"><iframe height="600" width="97%" src="checkbox/checkbox-focus.html"></iframe></p>      
    </contents>
  </slide>

  <slide>
    <title>Notes on Using ARIA in HTML</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-in-html/">Notes on Using ARIA in HTML</a></p>
      <ul>
        <li>Use native semantics of HTML (e.g. input[type=checkbox] rather than div[role=checkbox]).</li>
        <li>Don't override native semantics of elements (e.g. h2[role="banner]).</li>
        <li>Don't define the native semantics of an eleemnt (e.g main[role=main]).</li>
        <li>All interactive ARIA controls must be usable with the keyboard.</li>
        <li>Do not use role="presentation" or aria-hidden="true" on a visible focusable element.</li>
        <li>All interactive elements must have an accessible name.</li>
        <li>Live regions (e.g. <code>aria-live</code> attribute and <code>log</code>, <code>status</code>, and <code>alert</code> roles) should be used with extreme caution, only for ansynchrounous content changes important for the users attention.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Disclosure (Hide/Show)</title>
    <contents>
      
      <p class="center"><a href="hide-show/hide-show.zip" target="_example">ZIP file of Hide/Show Example</a></p>
      <p class="center"><a href="hide-show/hide-show.html" target="_example">Hide/Show Content Example</a></p>
      
      <h2>ARIA Features</h2>
      <ul>
        <li>Use <code>button</code> element, <code>input[type=button]</code> element or <code>role="button"</code> for identifying type of control to showing or hiding</li>
        <li>Use <code>aria-expanded</code> to indicate whether content is displayed or not</li>
        <li>Use <code>aria-controls</code> to identify the content the is shown or hidden</li>
      </ul>
      
      <p class="center"><iframe height="600" width="97%" src="hide-show/hide-show.html"></iframe></p>      
    </contents>
  </slide>
  
  <slide>
    <title>Example Widget: Slider</title>
    <contents>
      <p class="center"><a href="slider/slider.zip" target="_example">ZIP file of Slider Example</a></p>
      <p class="center"><a href="slider/slider.html" target="_example">ARIA Slider Example</a></p>
      <h2>ARIA Features</h2>
      <ul>
        <li>Use <code>role=slider</code> to identify the widget is selecting a range of values</li>
        <li>Use <code>aria-valuemin</code> to identify the minimum value</li>
        <li>Use <code>aria-valuemax</code> to identify the maximum value</li>
        <li>Use <code>aria-valuenow</code> to identify the current value</li>
        <li>Use <code>aria-labelledby</code> to label the slider purpose</li>
      </ul>
      <p class="center"><iframe height="600" width="97%" src="slider/slider.html"></iframe></p>      
    </contents>
  </slide>

  <slide>
    <title>Example Widget: Carousel</title>
    <contents>
      <p class="center"><a href="http://jongund.github.io/aria-examples/bootstrap-carousel/" target="_example">Bootstrap.js Carousel</a></p>
      <h2>Questions</h2>
      <ul>
        <li>How to you decide what to call this widget?</li>
        <li>What is the keyboard interaction?</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA Authoring Resources</title>
    <contents>
      <ul>
        <li>Section 2: Design Patterns and Widgets</li>
        <li>Section 3: Landmark Regions</li>
        <li>Section 4: Developing a Keyboard Interface</li>
        <li>Section 6. Intentionally Hiding Semantics with the presentation Role</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>  

 <slide>
    <title>The Need for ARIA Authoring Practices</title>
    <contents>
      <ul>
        <li>ARIA is often confusing to developers and designers.</li>
        <li>Improperly used ARIA markup can make web resources less accessible and break interoperability.</li>
        <li>ARIA examples and usage in actual websites are incomplete or incorrectly use ARIA markup adding to confusion.</li>
        <li>Lack of awareness of keyboard interaction support needed to make ARIA work properly.</li>
      </ul>      
    </contents>
  </slide>
  
  
 

  
  <slide>
    <title>Section 2: Design Patterns and Widgets</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex">ARIA Authoring Practices: Design Patterns and Widgets</a></li>
        <li>Desciption of widget.</li>
        <li>Keyboard interaction requirements and options.</li>
        <li>Uses of ARIA roles, properties and states.</li>
        <li>Examples</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Section 2.15: Menu Button</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton">ARIA Authoring Practices: Menu Button</a></li>
        <li>Desciption of example.</li>
        <li>Links to related examples.</li>
        <li>Working example.</li>
        <li>Keyboard interaction.</li>
        <li>Use of roles properties and states.</li>
        <li>Source code.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Menu Button Example</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/menu-button/menu-button-1/menu-button-1.html">Menu Button Example</a></li>
        <li>Desciption of example.</li>
        <li>Links to related examples.</li>
        <li>Working example.</li>
        <li>Keyboard interaction.</li>
        <li>Use of roles properties and states.</li>
        <li>Source code.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/examples/menu-button/menu-button-1/menu-button-1.html" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Section 3: Landmark Regions</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_landmark">ARIA Authoring Practices: Landmark Regions</a>.</li>
        <li>How to think about landmarks.</li>
        <li>Types of landmarks and their uses.</li>
        <li>HTML5 elements that define landmarks.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_landmark" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Landmarks Example</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/landmarks/">ARIA Authoring Practices Landmark Example</a></li>
        <li>Uses landmark in design.</li>
        <li>Landmark visualization feature.</li>
        <li>Links to related resources.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/examples/landmarks/" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Section 4: Developing a Keyboard Inteface</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard">ARIA Authoring Practices: Developing a Keyboard Interface</a></li>
        <li>This is often the least understood part of using ARIA technology.</li>
        <li>What is the keyboard interaciotn model and which ARIA widget roles are compatible with that model.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Section 4.1: Fundamental Keyboard Navigation Conventions</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav">ARIA Authoring Practices: Fundamental Keyboard Navigation Conventions</a></li>
        <li>Keyboard interaction model for each widget role.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Section 4.2: Discernable and Predictable Keyboard Focus</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_discernable_predictable">ARIA Authoring Practices: Discernable and Predictable Keyboard Focus</a></li>
        <li>Many users with disabilities can see the display, but need to idenfity the elements with keyboard focus and/or selections.</li>
        <li>Keyboard interaction is often difficult or impossible if users cannot identify what element has keyboard focus.</li>
        <li>Need more than just color, so the use of borders, underline or visual icons is important.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_discernable_predictable" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  <slide>
    <title>Section 4.3: Focus vs. Selection and the Perception of Dual Focus</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_vs_selection">ARIA Authoring Practices: Focus vs. Selection and the Perception of Dual Focus</a></li>
        <li>Making the styling of keyboard focus and selection different is important.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_vs_selection" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  <slide>
    <title>Section 4.4: Deciding When to Make Selection Automatically Follow Focus</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus">ARIA Authoring Practices: Deciding When to Make Selection Automatically Follow Focus</a></li>
        <li>When content is loaded basd on user interaction there can sometimes be delays in content being available, make sure the affects of these delays are minimized for keyboard users.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  
  <slide>
    <title>Section 4.5: Keyboard Navigation Between Components (The Tab Sequence)</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_between">ARIA Authoring Practices: Keyboard Navigation Between Components (The Tab Sequence)</a></li>
        <li>The use of <code>tabindex=-1</code> and <code>tabindex=0</code> to define interactive elements and tab order of content of the page.</li>
        <li><code>tabindex</code> values > 0 are discouraged, and should only be used cautiously.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_between" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  
  <slide>
    <title>Section 4.6: Keyboard Navigation Inside Components</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within">ARIA Authoring Practices: Keyboard Navigation Inside Components</a></li>
        <li>Roving <code>tabindex</code> versus <code>aria-activedescendant</code> technique for identifying element with current focus.</li>
        <li>Call <code>focus()</code> on elements with focus.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  <slide>
    <title>Section 4.7: Focusability of Disabled Controls</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_disabled_controls">ARIA Authoring Practices: Focusability of disabled controls</a></li>
        <li>When to keep or remove keyboard interaction to disabled controls.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_disabled_controls" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  <slide>
    <title>Section 4.8: Keyboard Shortcuts</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_shortcuts">ARIA Authoring Practices: Keyboard Shortcuts</a></li>
        <li>Understanding how keyboard shortcuts augment a keyboard interface and whether to make a particular shortcut move focus, perform a function, or both.</li>
        <li>Making key assignments and avoiding assignment conflicts with assistive technologies, browsers, and operating systems.</li>
        <li>Exposing and documenting key assignments.</li>
      </ul>  
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_shortcuts" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  <slide>p
    <title>Section 6: Intentionally Hiding Semantics with the Presentation Role</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#presentation_role">Section 6: Intentionally Hiding Semantics with the presentation Role </a></p>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#presentation_role" width="98%" height="600px"></iframe>      
    </contents>
  </slide>

  <slide>
    <title>Section 7. Roles That Automatically Hide Semantics by Making Their Descendants Presentational</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#children_presentational">Section 7. Roles That Automatically Hide Semantics by Making Their Descendants Presentational</a></p>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#children_presentational" width="98%" height="600px"></iframe>      
    </contents>
  </slide>
    
  <slide>
    <title>Accessible Name and Description: Computation and API Mappings 1.1</title>
    <contents>
      <p><a href="https://www.w3.org/TR/accname-aam-1.1/">Accessible Name and Description: Computation and API Mappings 1.1</a></p>
      <iframe src="https://www.w3.org/TR/accname-aam-1.1/ " width="98%" height="600px"></iframe>      
    </contents>
  </slide>
  
  <slide>
    <title>Next Steps for ARIA Authoring Practices Guide</title>
    <contents>
      <ul>
        <li>Additional widget descriptions and examples</li>
        <li>Grid and Table Examples</li>
        <li>Accessible visual state and synchronization with ARIA states techniques</li>
        <li>Form error feedback</li>
        <li>Index of examples</li>
      </ul>
    </contents>
  </slide>
    
  <slide>
    <title>Open Source Tools and Training</title>
    <contents>
      <ul>
        <li><a href="https://addons.mozilla.org/en-US/firefox/addon/ainspector-sidebar/">AInspector Sidebar for Firefox</a></li>
        <li><a href="https://fae.disability.illinois.edu">Functional Accessibility Evaluator 2.0</a></li>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
        <li><a href="http://go.illinois.edu/a11y-badges">Web Accessibility Badging Courses using HTML5 and ARIA Authoring Practices</a></li>
      </ul>
    </contents>
  </slide>
  <slide>
    <title>Functional Accessibility Evaluator (FAE) 2.0</title>
    <contents>
      <ul>
        <li>Two versions of Functional Accessibility Evaluator 2.0
          <ul>
            <li><a href="https://fae.disability.illinois.edu">FAE 2.0 Indidvidual License Version</a></li>
            <li><a href="https://fae.illinois.edu">FAE 2.0 Institutional License Version</a> using <a href="https://www.incommon.org/">InCommon</a></li>
          </ul>
        </li>  
        <li>Designed for:
          <ul>
            <li>Managers</li>
            <li>Web designers</li>
            <li>Software developers</li>
            <li>Quality assurance testers</li>
            <li>IT Auditors</li>
          </ul>
        </li>
        <li>Website rule result summaries and implementation status</li>
        <li>Page rule result summaries</li>
        <li>Organizes rules by Rule Categories, Rule Scope and WCAG Guidelines</li>
        <li>Archive and share reports</li>
      </ul>
      
    </contents>
  </slide>   

  <slide>
    <title>AInspector Sidebar for Firefox</title>
    <contents>
      <ul>
        <li><a href="http://ainspector.github.io">http://ainspector.github.io</a></li>
        <li>Designed for:
          <ul>
            <li>Web designers</li>
            <li>Software developers</li>
            <li>Quality assurance testers</li>
          </ul>
        </li>
        <li>Summary Rule Results
          <ul>
            <li>Rule Categories</li>
            <li>WCAG 2.0 Guideline Summary</li>
          </ul>
        </li>  
        <li>Analyzes the browser DOM content</li>
        <li>Highlighting elements</li>
        <li>DOM inspector</li>
      </ul>
      
    </contents>
  </slide>  

  <slide>
    <title>Bookmarklets for Visualizing Accessibility Features</title>
    <contents>
      <ul>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
        <li>Features:
          <ul>
            <li>Highlight Regions and Elements on page</li>
            <li>Element information</li>
            <li>Default or defined <code>role</code></li>
            <li>Accessible name</li>
            <li>Accessible description</li>
            <li>Important prorperties (e.g the number of items in a list)</li>
          </ul>
        </li>
      </ul>  
    </contents>
  </slide>  

</slides> 


